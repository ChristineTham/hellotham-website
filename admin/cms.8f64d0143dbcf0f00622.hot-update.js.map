{"version":3,"file":"cms.8f64d0143dbcf0f00622.hot-update.js","sources":["webpack:///./src/templates/contact-page.js"],"sourcesContent":["/* eslint-disable */\nimport React from 'react'\nimport { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport { navigate } from 'gatsby-link'\n\nimport Layout from '../components/Layout'\nimport { HTMLContent } from '../components/Content'\n\nfunction encode(data) {\n  return Object.keys(data)\n    .map((key) => encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\n    .join('&')\n}\n\nexport const ContactPageTemplate = ({\n  title,\n  subtitle,\n  image,\n  channels,\n  content\n}) => {\n  const [state, setState] = useState({ isValidated: false })\n\n  const handleChange = (e) => {\n    setState({ [e.target.name]: e.target.value })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const form = e.target\n    fetch('/', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: encode({\n        'form-name': form.getAttribute('name'),\n        ...state,\n      }),\n    })\n      .then(() => navigate(form.getAttribute('action')))\n      .catch((error) => alert(error))\n  }\n\n  return (\n    <div>\n      <div\n        className=\"full-width-image margin-top-0\"\n        style={{\n          backgroundImage: `url(${\n            !!image.childImageSharp ? image.childImageSharp.fluid.src : image\n          })`,\n          backgroundPosition: `top left`,\n          backgroundAttachment: `fixed`,\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            height: '150px',\n            lineHeight: '1',\n            justifyContent: 'space-around',\n            alignItems: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          <h1\n            className=\"has-text-centered has-text-weight-bold is-size-3-mobile is-size-2-tablet is-size-1-widescreen\"\n            style={{\n              backgroundColor: '#ff99cc',\n              color: '#660099',\n              lineHeight: '1',\n              padding: '0.25em',\n            }}\n          >\n            {title}\n          </h1>\n          <h3\n            className=\"has-text-centered has-text-weight-bold is-size-5-mobile is-size-5-tablet is-size-4-widescreen\"\n            style={{\n              backgroundColor: '#cc3366',\n              color: 'white',\n              lineHeight: '1',\n              padding: '0.25em',\n            }}\n          >\n            {subtitle}\n          </h3>\n        </div>\n      </div>\n      <section className=\"section\">\n          <div className=\"container\">\n            <div className=\"content\">\n              <div className=\"columns is-multiline\">\n                <div className=\"column is-6\">\n                  <HTMLContent className=\"content\" content={content} />\n                  {channels.map((channel) => (\n                    <div>\n                      <a href={channel.link}>\n                        <img src={channel.icon.publicURL} alt={channel.name} style={{ width: '3em', verticalAlign: 'middle', paddingRight: '1em', paddingBottom: '0.5em'}} />\n                        {channel.name}: {channel.link}\n                      </a>\n                    </div>\n                  ))} \n                </div>\n                <div className=\"column is-6\">\n                  <form\n                    name=\"contact\"\n                    method=\"post\"\n                    action=\"/contact/thanks/\"\n                    data-netlify=\"true\"\n                    data-netlify-honeypot=\"bot-field\"\n                    onSubmit={handleSubmit}\n                  >\n                    {/* The `form-name` hidden field is required to support form submissions without JavaScript */}\n                    <input type=\"hidden\" name=\"form-name\" value=\"contact\" />\n                    <div hidden>\n                      <label htmlFor=\"bot-field-id\">\n                        Donâ€™t fill this out:{' '}\n                        <input id=\"bot-field-id\" name=\"bot-field\" onChange={handleChange} />\n                      </label>\n                    </div>\n                    <div className=\"field\">\n                      <label className=\"label\" htmlFor=\"name-id\">\n                        Your name\n                      </label>\n                      <div className=\"control\">\n                        <input\n                          className=\"input\"\n                          type={'text'}\n                          name={'name'}\n                          onChange={handleChange}\n                          id=\"name-id\"\n                          required={true}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"field\">\n                      <label className=\"label\" htmlFor={'email'}>\n                        Email\n                      </label>\n                      <div className=\"control\">\n                        <input\n                          className=\"input\"\n                          type={'email'}\n                          name={'email'}\n                          onChange={handleChange}\n                          id={'email'}\n                          required={true}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"field\">\n                      <label className=\"label\" htmlFor={'message'}>\n                        Message\n                      </label>\n                      <div className=\"control\">\n                        <textarea\n                          className=\"textarea\"\n                          name={'message'}\n                          onChange={handleChange}\n                          id={'message'}\n                          required={true}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"field\">\n                      <button className=\"button is-link\" type=\"submit\">\n                        Send\n                      </button>\n                    </div>\n                  </form>                  \n                </div>\n              </div>\n\n            </div>\n          </div>\n        </section>\n    </div>\n  )\n}\n\nContactPageTemplate.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  channels: PropTypes.array,\n  content: PropTypes.string,\n}\n\nconst ContactPage = ({ data }) => {\n  const { markdownRemark: post } = data\n\n  return (\n    <Layout>\n      <ContactPageTemplate\n        title={post.frontmatter.title}\n        subtitle={post.frontmatter.subtitle}\n        image={post.frontmatter.image}\n        channels={post.frontmatter.channels}\n        content={post.html}\n      />\n    </Layout>\n  )\n}\n\nContactPage.propTypes = {\n  data: PropTypes.object.isRequired,\n}\n\nexport default ContactPage\n\nexport const pageQuery = graphql`\n  query ContactPageTemplate {\n    markdownRemark(frontmatter: { templateKey: { eq: \"contact-page\" } }) {\n      html\n      frontmatter {\n        title\n        subtitle\n        image {\n          childImageSharp {\n            fluid(maxWidth: 2048, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        channels {\n          name\n          icon {\n            publicURL\n          }\n          link\n        }\n      }\n    }\n  }\n`\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAHA;AAQA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AALA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaaA;AACA;AArKA;AACA;AAqKA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AADA;AAIA;AAAA;AAEA;;;;;;;;;;AA1MA;AAMA;AA8KA;AAsBA;;;;;;;;;;;;;;A","sourceRoot":""}