{"version":3,"sources":["webpack:///./src/templates/contact-page.js","webpack:///./src/components/Content.js"],"names":["ContactPageTemplate","title","subtitle","image","channels","content","useState","isValidated","state","setState","handleChange","e","target","name","value","className","style","backgroundImage","childImageSharp","fluid","src","backgroundPosition","backgroundAttachment","display","height","lineHeight","justifyContent","alignItems","flexDirection","backgroundColor","color","padding","map","channel","href","link","icon","publicURL","alt","width","verticalAlign","paddingRight","paddingBottom","method","action","data-netlify","data-netlify-honeypot","onSubmit","preventDefault","data","form","fetch","headers","body","getAttribute","Object","keys","key","encodeURIComponent","join","then","navigate","catch","error","alert","type","hidden","htmlFor","id","onChange","required","ContactPage","post","markdownRemark","frontmatter","html","pageQuery","HTMLContent","dangerouslySetInnerHTML","__html","Content"],"mappings":"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","file":"component---src-templates-contact-page-js-2e364a440d01509ab9ef.js","sourcesContent":["/* eslint-disable */\nimport React from 'react'\nimport { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport { navigate } from 'gatsby-link'\n\nimport Layout from '../components/Layout'\nimport { HTMLContent } from '../components/Content'\n\nfunction encode(data) {\n  return Object.keys(data)\n    .map((key) => encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\n    .join('&')\n}\n\nexport const ContactPageTemplate = ({\n  title,\n  subtitle,\n  image,\n  channels,\n  content\n}) => {\n  const [state, setState] = useState({ isValidated: false })\n\n  const handleChange = (e) => {\n    setState({ [e.target.name]: e.target.value })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const form = e.target\n    fetch('/', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: encode({\n        'form-name': form.getAttribute('name'),\n        ...state,\n      }),\n    })\n      .then(() => navigate(form.getAttribute('action')))\n      .catch((error) => alert(error))\n  }\n\n  return (\n    <div>\n      <div\n        className=\"full-width-image margin-top-0\"\n        style={{\n          backgroundImage: `url(${\n            !!image.childImageSharp ? image.childImageSharp.fluid.src : image\n          })`,\n          backgroundPosition: `top left`,\n          backgroundAttachment: `fixed`,\n        }}\n      >\n       <div\n        style={{\n          display: 'flex',\n          height: '150px',\n          lineHeight: '1',\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'column',\n        }}\n      >\n        <h1\n          className=\"has-text-centered has-text-weight-bold is-size-3-mobile is-size-2-tablet is-size-1-widescreen\"\n          style={{\n            backgroundColor: '#ff99cc',\n            color: '#660099',\n            lineHeight: '1',\n            padding: '0.25em',\n          }}\n        >\n          {title}\n        </h1>\n        <h3\n          className=\"has-text-centered has-text-weight-bold is-size-5-mobile is-size-5-tablet is-size-4-widescreen\"\n          style={{\n            backgroundColor: '#cc3366',\n            color: 'white',\n            lineHeight: '1',\n            padding: '0.25em',\n          }}\n        >\n          {subtitle}\n        </h3>\n      </div>\n      </div>\n      <section className=\"section\">\n          <div className=\"container\">\n            <div className=\"content\">\n              <div className=\"columns is-multiline\">\n                <div className=\"column is-6\">\n                  <HTMLContent className=\"content\" content={content} />\n                  {channels.map((channel) => (\n                    <div>\n                      <a href={channel.link}>\n                        <img src={channel.icon.publicURL} alt={channel.name} style={{ width: '3em', verticalAlign: 'middle', paddingRight: '1em', paddingBottom: '0.5em'}} />\n                        {channel.name}: {channel.link}\n                      </a>\n                    </div>\n                  ))} \n                </div>\n                <div className=\"column is-6\">\n                  <form\n                    name=\"contact\"\n                    method=\"post\"\n                    action=\"/contact/thanks/\"\n                    data-netlify=\"true\"\n                    data-netlify-honeypot=\"bot-field\"\n                    onSubmit={handleSubmit}\n                  >\n                    {/* The `form-name` hidden field is required to support form submissions without JavaScript */}\n                    <input type=\"hidden\" name=\"form-name\" value=\"contact\" />\n                    <div hidden>\n                      <label htmlFor=\"bot-field-id\">\n                        Donâ€™t fill this out:{' '}\n                        <input id=\"bot-field-id\" name=\"bot-field\" onChange={handleChange} />\n                      </label>\n                    </div>\n                    <div className=\"field\">\n                      <label className=\"label\" htmlFor=\"name-id\">\n                        Your name\n                      </label>\n                      <div className=\"control\">\n                        <input\n                          className=\"input\"\n                          type={'text'}\n                          name={'name'}\n                          onChange={handleChange}\n                          id=\"name-id\"\n                          required={true}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"field\">\n                      <label className=\"label\" htmlFor={'email'}>\n                        Email\n                      </label>\n                      <div className=\"control\">\n                        <input\n                          className=\"input\"\n                          type={'email'}\n                          name={'email'}\n                          onChange={handleChange}\n                          id={'email'}\n                          required={true}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"field\">\n                      <label className=\"label\" htmlFor={'message'}>\n                        Message\n                      </label>\n                      <div className=\"control\">\n                        <textarea\n                          className=\"textarea\"\n                          name={'message'}\n                          onChange={handleChange}\n                          id={'message'}\n                          required={true}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"field\">\n                      <button className=\"button is-link\" type=\"submit\">\n                        Send\n                      </button>\n                    </div>\n                  </form>                  \n                </div>\n              </div>\n\n            </div>\n          </div>\n        </section>\n    </div>\n  )\n}\n\nContactPageTemplate.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  channels: PropTypes.array,\n  content: PropTypes.string,\n}\n\nconst ContactPage = ({ data }) => {\n  const { markdownRemark: post } = data\n\n  return (\n    <Layout>\n      <ContactPageTemplate\n        title={post.frontmatter.title}\n        subtitle={post.frontmatter.subtitle}\n        image={post.frontmatter.image}\n        channels={post.frontmatter.channels}\n        content={post.html}\n      />\n    </Layout>\n  )\n}\n\nContactPage.propTypes = {\n  data: PropTypes.object.isRequired,\n}\n\nexport default ContactPage\n\nexport const pageQuery = graphql`\n  query ContactPageTemplate {\n    markdownRemark(frontmatter: { templateKey: { eq: \"contact-page\" } }) {\n      html\n      frontmatter {\n        title\n        subtitle\n        image {\n          childImageSharp {\n            fluid(maxWidth: 2048, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        channels {\n          name\n          icon {\n            publicURL\n          }\n          link\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const HTMLContent = ({ content, className }) => (\n  <div className={className} dangerouslySetInnerHTML={{ __html: content }} />\n)\n\nconst Content = ({ content, className }) => (\n  <div className={className}>{content}</div>\n)\n\nContent.propTypes = {\n  content: PropTypes.node,\n  className: PropTypes.string,\n}\n\nHTMLContent.propTypes = Content.propTypes\n\nexport default Content\n"],"sourceRoot":""}