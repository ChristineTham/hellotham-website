{"version":3,"sources":["webpack:///./src/components/PreviewCompatibleImage.js","webpack:///./src/components/BlogRoll.js"],"names":["PreviewCompatibleImage","imageInfo","imageStyle","borderRadius","alt","childImageSharp","image","style","fluid","src","PureBlogRoll","render","this","props","limit","posts","data","allMarkdownRemark","edges","slice","className","map","post","node","key","id","frontmatter","featuredpost","featuredimage","title","to","fields","slug","date","excerpt","React","Component","query"],"mappings":"2FAAA,8CAiCeA,IA7BgB,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAC1BC,EAAa,CAAEC,aAAc,OADa,EAEHF,EAArCG,WAFwC,MAElC,GAFkC,EAE9BC,EAA2BJ,EAA3BI,gBAAiBC,EAAUL,EAAVK,MAEnC,OAAMA,GAAWA,EAAMD,gBAEnB,kBAAC,IAAD,CAAKE,MAAOL,EAAYM,MAAOF,EAAMD,gBAAgBG,MAAOJ,IAAKA,IAI/DC,EACG,kBAAC,IAAD,CAAKE,MAAOL,EAAYM,MAAOH,EAAgBG,MAAOJ,IAAKA,IAG9DE,GAA0B,iBAAVA,EACb,yBAAKC,MAAOL,EAAYO,IAAKH,EAAOF,IAAKA,IAE3C,O,+voDChBHM,E,gLACJC,OAAA,WAAU,IAAD,EACiBC,KAAKC,MAArBC,EADD,EACCA,MACKC,EAFN,EACQC,KACaC,kBAAtBC,MAKN,OAHIJ,IACFC,EAAQA,EAAMI,MAAM,EAAEL,IAGtB,yBAAKM,UAAU,wBACZL,GACCA,EAAMM,KAAI,gBAASC,EAAT,EAAGC,KAAH,OACR,yBAAKH,UAAU,wBAAwBI,IAAKF,EAAKG,IAC/C,6BACEL,UAAS,kDACPE,EAAKI,YAAYC,aAAe,cAAgB,KAGlD,gCACGL,EAAKI,YAAYE,cAChB,yBAAKR,UAAU,sBACb,kBAAC,IAAD,CACEnB,UAAW,CACTK,MAAOgB,EAAKI,YAAYE,cACxBxB,IAAI,qCAAsCkB,EAAKI,YAAYG,UAI/D,KACJ,uBAAGT,UAAU,aACX,kBAAC,IAAD,CACEA,UAAU,mCACVU,GAAIR,EAAKS,OAAOC,MAEfV,EAAKI,YAAYG,OAEpB,qCACA,0BAAMT,UAAU,+BACbE,EAAKI,YAAYO,QAIxB,2BACGX,EAAKY,QACN,6BACA,6BACA,kBAAC,IAAD,CAAMd,UAAU,SAASU,GAAIR,EAAKS,OAAOC,MAAzC,0B,GA9CSG,IAAMC,WAkElB,aAACvB,GAAD,OACb,kBAAC,IAAD,CACEwB,MAAK,YA+BL1B,OAAQ,SAACK,GAAD,OAAU,kBAACN,EAAD,iBAAkBG,EAAlB,CAAyBG,KAAMA,MAhCnD","file":"233a1a0f0481e1f160c8b6a87829289b8028ee57-7863635e71238cadf4c2.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Img from 'gatsby-image'\n\nconst PreviewCompatibleImage = ({ imageInfo }) => {\n  const imageStyle = { borderRadius: '5px' }\n  const { alt = '', childImageSharp, image } = imageInfo\n\n  if (!!image && !!image.childImageSharp) {\n    return (\n      <Img style={imageStyle} fluid={image.childImageSharp.fluid} alt={alt} />\n    )\n  }\n\n  if (!!childImageSharp) {\n    return <Img style={imageStyle} fluid={childImageSharp.fluid} alt={alt} />\n  }\n\n  if (!!image && typeof image === 'string')\n    return <img style={imageStyle} src={image} alt={alt} />\n\n  return null\n}\n\nPreviewCompatibleImage.propTypes = {\n  imageInfo: PropTypes.shape({\n    alt: PropTypes.string,\n    childImageSharp: PropTypes.object,\n    image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n    style: PropTypes.object,\n  }).isRequired,\n}\n\nexport default PreviewCompatibleImage\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql, StaticQuery } from 'gatsby'\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\n\nclass PureBlogRoll extends React.Component {\n  render() {\n    const { limit, data } = this.props\n    var { edges: posts } = data.allMarkdownRemark\n\n    if (limit) {\n      posts = posts.slice(0,limit)\n    }\n    return (\n      <div className=\"columns is-multiline\">\n        {posts &&\n          posts.map(({ node: post }) => (\n            <div className=\"is-parent column is-6\" key={post.id}>\n              <article\n                className={`blog-list-item tile is-child box notification ${\n                  post.frontmatter.featuredpost ? 'is-featured' : ''\n                }`}\n              >\n                <header>\n                  {post.frontmatter.featuredimage ? (\n                    <div className=\"featured-thumbnail\">\n                      <PreviewCompatibleImage\n                        imageInfo={{\n                          image: post.frontmatter.featuredimage,\n                          alt: `featured image thumbnail for post ${post.frontmatter.title}`,\n                        }}\n                      />\n                    </div>\n                  ) : null}\n                  <p className=\"post-meta\">\n                    <Link\n                      className=\"title has-text-primary is-size-5\"\n                      to={post.fields.slug}\n                    >\n                      {post.frontmatter.title}\n                    </Link>\n                    <span> &bull; </span>\n                    <span className=\"subtitle is-size-7 is-block\">\n                      {post.frontmatter.date}\n                    </span>\n                  </p>\n                </header>\n                <p>\n                  {post.excerpt}\n                  <br />\n                  <br />\n                  <Link className=\"button\" to={post.fields.slug}>\n                    Keep Reading â†’\n                  </Link>\n                </p>\n              </article>\n            </div>\n          ))}\n      </div>\n    )\n  }\n}\n\nPureBlogRoll.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.array,\n    }),\n  }),\n}\n\nexport default (props) => (\n  <StaticQuery\n    query={graphql`\n      query BlogRollQuery {\n        allMarkdownRemark(\n          sort: { order: DESC, fields: [frontmatter___date] }\n          filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\n        ) {\n          edges {\n            node {\n              excerpt(pruneLength: 400)\n              id\n              fields {\n                slug\n              }\n              frontmatter {\n                title\n                templateKey\n                date(formatString: \"DD MMMM YYYY\")\n                featuredpost\n                featuredimage {\n                  childImageSharp {\n                    fluid(maxWidth: 120, quality: 100) {\n                      ...GatsbyImageSharpFluid\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={(data) => <PureBlogRoll {...props} data={data} />}\n  />\n)\n"],"sourceRoot":""}